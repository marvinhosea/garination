// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatabaseService_HealthCheck_FullMethodName                         = "/DatabaseService/HealthCheck"
	DatabaseService_GetUserMeta_FullMethodName                         = "/DatabaseService/GetUserMeta"
	DatabaseService_InsertUserMeta_FullMethodName                      = "/DatabaseService/InsertUserMeta"
	DatabaseService_UpdateUserMeta_FullMethodName                      = "/DatabaseService/UpdateUserMeta"
	DatabaseService_ChangeDealership_FullMethodName                    = "/DatabaseService/ChangeDealership"
	DatabaseService_InsertDealership_FullMethodName                    = "/DatabaseService/InsertDealership"
	DatabaseService_UpdateDealership_FullMethodName                    = "/DatabaseService/UpdateDealership"
	DatabaseService_GetDealershipByUserId_FullMethodName               = "/DatabaseService/GetDealershipByUserId"
	DatabaseService_GetDealershipByID_FullMethodName                   = "/DatabaseService/GetDealershipByID"
	DatabaseService_DeleteDealership_FullMethodName                    = "/DatabaseService/DeleteDealership"
	DatabaseService_InsertCarBrand_FullMethodName                      = "/DatabaseService/InsertCarBrand"
	DatabaseService_UpdateCarBrand_FullMethodName                      = "/DatabaseService/UpdateCarBrand"
	DatabaseService_GetCarBrandByID_FullMethodName                     = "/DatabaseService/GetCarBrandByID"
	DatabaseService_GetCarBrandsPaginated_FullMethodName               = "/DatabaseService/GetCarBrandsPaginated"
	DatabaseService_DeleteCarBrand_FullMethodName                      = "/DatabaseService/DeleteCarBrand"
	DatabaseService_InsertCarExtraFeature_FullMethodName               = "/DatabaseService/InsertCarExtraFeature"
	DatabaseService_UpdateCarExtraFeature_FullMethodName               = "/DatabaseService/UpdateCarExtraFeature"
	DatabaseService_GetCarExtraFeaturePaginated_FullMethodName         = "/DatabaseService/GetCarExtraFeaturePaginated"
	DatabaseService_DeleteCarExtraFeature_FullMethodName               = "/DatabaseService/DeleteCarExtraFeature"
	DatabaseService_CreateCarImage_FullMethodName                      = "/DatabaseService/CreateCarImage"
	DatabaseService_UpdateCarImage_FullMethodName                      = "/DatabaseService/UpdateCarImage"
	DatabaseService_GetCarImagePaginated_FullMethodName                = "/DatabaseService/GetCarImagePaginated"
	DatabaseService_DeleteCarImage_FullMethodName                      = "/DatabaseService/DeleteCarImage"
	DatabaseService_InsertCar_FullMethodName                           = "/DatabaseService/InsertCar"
	DatabaseService_UpdateCar_FullMethodName                           = "/DatabaseService/UpdateCar"
	DatabaseService_GetOneCar_FullMethodName                           = "/DatabaseService/GetOneCar"
	DatabaseService_GetCarsPaginated_FullMethodName                    = "/DatabaseService/GetCarsPaginated"
	DatabaseService_GetCarsByDealershipIDPaginated_FullMethodName      = "/DatabaseService/GetCarsByDealershipIDPaginated"
	DatabaseService_GetCarsByBrandIDPaginated_FullMethodName           = "/DatabaseService/GetCarsByBrandIDPaginated"
	DatabaseService_GetCarsByDealerIDPaginated_FullMethodName          = "/DatabaseService/GetCarsByDealerIDPaginated"
	DatabaseService_SearchCarsPaginated_FullMethodName                 = "/DatabaseService/SearchCarsPaginated"
	DatabaseService_GetCarByField_FullMethodName                       = "/DatabaseService/GetCarByField"
	DatabaseService_GetCarByDealerCount_FullMethodName                 = "/DatabaseService/GetCarByDealerCount"
	DatabaseService_GetCarByDealershipCount_FullMethodName             = "/DatabaseService/GetCarByDealershipCount"
	DatabaseService_GetCarByBrandCount_FullMethodName                  = "/DatabaseService/GetCarByBrandCount"
	DatabaseService_DeleteCar_FullMethodName                           = "/DatabaseService/DeleteCar"
	DatabaseService_GetSparePartByID_FullMethodName                    = "/DatabaseService/GetSparePartByID"
	DatabaseService_DeleteSparePart_FullMethodName                     = "/DatabaseService/DeleteSparePart"
	DatabaseService_FilterSparePartByBrandPaginated_FullMethodName     = "/DatabaseService/FilterSparePartByBrandPaginated"
	DatabaseService_FilterSparePartByCategory_FullMethodName           = "/DatabaseService/FilterSparePartByCategory"
	DatabaseService_FilterSparePartByCarModel_FullMethodName           = "/DatabaseService/FilterSparePartByCarModel"
	DatabaseService_GetSparePartImageByID_FullMethodName               = "/DatabaseService/GetSparePartImageByID"
	DatabaseService_InsertSparePart_FullMethodName                     = "/DatabaseService/InsertSparePart"
	DatabaseService_InsertSparePartImage_FullMethodName                = "/DatabaseService/InsertSparePartImage"
	DatabaseService_ListSparePartImagesBySparePartPaged_FullMethodName = "/DatabaseService/ListSparePartImagesBySparePartPaged"
	DatabaseService_ListSparePartImagesPaged_FullMethodName            = "/DatabaseService/ListSparePartImagesPaged"
	DatabaseService_ListSparePartsByDealerPaged_FullMethodName         = "/DatabaseService/ListSparePartsByDealerPaged"
	DatabaseService_ListSparePartsByDealershipPaged_FullMethodName     = "/DatabaseService/ListSparePartsByDealershipPaged"
	DatabaseService_ListSparePartsPaged_FullMethodName                 = "/DatabaseService/ListSparePartsPaged"
	DatabaseService_SearchSparePartsPaged_FullMethodName               = "/DatabaseService/SearchSparePartsPaged"
	DatabaseService_UpdateSparePart_FullMethodName                     = "/DatabaseService/UpdateSparePart"
	DatabaseService_UpdateSparePartImage_FullMethodName                = "/DatabaseService/UpdateSparePartImage"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetUserMeta(ctx context.Context, in *GetUserMetaRequest, opts ...grpc.CallOption) (*GetUserMetaResponse, error)
	InsertUserMeta(ctx context.Context, in *InsertUserMetaRequest, opts ...grpc.CallOption) (*InsertUserMetaResponse, error)
	UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...grpc.CallOption) (*UpdateUserMetaResponse, error)
	ChangeDealership(ctx context.Context, in *ChangeDealershipRequest, opts ...grpc.CallOption) (*ChangeDealershipResponse, error)
	InsertDealership(ctx context.Context, in *InsertDealershipRequest, opts ...grpc.CallOption) (*InsertDealershipResponse, error)
	UpdateDealership(ctx context.Context, in *UpdateDealershipRequest, opts ...grpc.CallOption) (*UpdateDealershipResponse, error)
	GetDealershipByUserId(ctx context.Context, in *GetUserDealershipRequest, opts ...grpc.CallOption) (*GetDealershipByUserIDResponse, error)
	GetDealershipByID(ctx context.Context, in *GetDealershipByIDRequest, opts ...grpc.CallOption) (*GetDealershipByIDResponse, error)
	DeleteDealership(ctx context.Context, in *DeleteDealershipRequest, opts ...grpc.CallOption) (*DeleteDealershipResponse, error)
	InsertCarBrand(ctx context.Context, in *InsertCarBrandRequest, opts ...grpc.CallOption) (*InsertCarBrandResponse, error)
	UpdateCarBrand(ctx context.Context, in *UpdateCarBrandRequest, opts ...grpc.CallOption) (*UpdateCarBrandResponse, error)
	GetCarBrandByID(ctx context.Context, in *GetCarBrandByIDRequest, opts ...grpc.CallOption) (*GetCarBrandByIDResponse, error)
	GetCarBrandsPaginated(ctx context.Context, in *GetCarBrandsPaginatedRequest, opts ...grpc.CallOption) (*GetCarBrandsPaginatedResponse, error)
	DeleteCarBrand(ctx context.Context, in *DeleteCarBrandRequest, opts ...grpc.CallOption) (*DeleteCarBrandResponse, error)
	InsertCarExtraFeature(ctx context.Context, in *InsertCarExtraFeatureRequest, opts ...grpc.CallOption) (*InsertCarExtraFeatureResponse, error)
	UpdateCarExtraFeature(ctx context.Context, in *UpdateCarExtraFeatureRequest, opts ...grpc.CallOption) (*UpdateCarExtraFeatureResponse, error)
	GetCarExtraFeaturePaginated(ctx context.Context, in *GetCarExtraFeaturesPaginatedRequest, opts ...grpc.CallOption) (*GetCarExtraFeaturesPaginatedResponse, error)
	DeleteCarExtraFeature(ctx context.Context, in *DeleteCarExtraFeatureRequest, opts ...grpc.CallOption) (*DeleteCarExtraFeatureResponse, error)
	CreateCarImage(ctx context.Context, in *CreateCarImageRequest, opts ...grpc.CallOption) (*CreateCarImageResponse, error)
	UpdateCarImage(ctx context.Context, in *UpdateCarImageRequest, opts ...grpc.CallOption) (*UpdateCarImageResponse, error)
	GetCarImagePaginated(ctx context.Context, in *GetCarImagesPaginatedRequest, opts ...grpc.CallOption) (*GetCarImagesPaginatedResponse, error)
	DeleteCarImage(ctx context.Context, in *DeleteCarImageRequest, opts ...grpc.CallOption) (*DeleteCarImageResponse, error)
	InsertCar(ctx context.Context, in *InsertCarRequest, opts ...grpc.CallOption) (*InsertCarResponse, error)
	UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*UpdateCarResponse, error)
	GetOneCar(ctx context.Context, in *GetOneCarRequest, opts ...grpc.CallOption) (*GetOneCarResponse, error)
	GetCarsPaginated(ctx context.Context, in *GetCarsPaginatedRequest, opts ...grpc.CallOption) (*GetCarsPaginatedResponse, error)
	GetCarsByDealershipIDPaginated(ctx context.Context, in *GetCarsByDealershipIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByDealershipIDPaginatedResponse, error)
	GetCarsByBrandIDPaginated(ctx context.Context, in *GetCarsByBrandIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByCarBrandIDPaginatedResponse, error)
	GetCarsByDealerIDPaginated(ctx context.Context, in *GetCarsByDealerIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByDealerIDPaginatedResponse, error)
	SearchCarsPaginated(ctx context.Context, in *SearchCarsPaginatedRequest, opts ...grpc.CallOption) (*SearchCarsPaginatedResponse, error)
	GetCarByField(ctx context.Context, in *GetCarByFieldRequest, opts ...grpc.CallOption) (*GetCarByFieldResponse, error)
	GetCarByDealerCount(ctx context.Context, in *GetCarByDealerCountRequest, opts ...grpc.CallOption) (*GetCarByDealerCountResponse, error)
	GetCarByDealershipCount(ctx context.Context, in *GetCarByDealershipCountRequest, opts ...grpc.CallOption) (*GetCarByDealershipCountResponse, error)
	GetCarByBrandCount(ctx context.Context, in *GetCarByBrandCountRequest, opts ...grpc.CallOption) (*GetCarByCarBrandCountResponse, error)
	DeleteCar(ctx context.Context, in *DeleteCarRequest, opts ...grpc.CallOption) (*DeleteCarResponse, error)
	GetSparePartByID(ctx context.Context, in *GetSparePartByIDRequest, opts ...grpc.CallOption) (*GetSparePartByIDResponse, error)
	DeleteSparePart(ctx context.Context, in *DeleteSparePartRequest, opts ...grpc.CallOption) (*DeleteSparePartResponse, error)
	FilterSparePartByBrandPaginated(ctx context.Context, in *FilterSparePartByBrandPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByBrandPaginatedResponse, error)
	FilterSparePartByCategory(ctx context.Context, in *FilterSparePartByCategoryPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByCategoryPaginatedResponse, error)
	FilterSparePartByCarModel(ctx context.Context, in *FilterSparePartByCarModelPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByCarModelPaginatedResponse, error)
	GetSparePartImageByID(ctx context.Context, in *GetSparePartImageByIDRequest, opts ...grpc.CallOption) (*GetSparePartImageByIDResponse, error)
	InsertSparePart(ctx context.Context, in *InsertSparePartRequest, opts ...grpc.CallOption) (*InsertSparePartResponse, error)
	InsertSparePartImage(ctx context.Context, in *InsertSparePartImageRequest, opts ...grpc.CallOption) (*InsertSparePartImageResponse, error)
	ListSparePartImagesBySparePartPaged(ctx context.Context, in *ListSparePartImagesBySparePartPagedRequest, opts ...grpc.CallOption) (*ListSparePartImagesBySparePartPagedResponse, error)
	ListSparePartImagesPaged(ctx context.Context, in *ListSparePartImagesPagedRequest, opts ...grpc.CallOption) (*ListSparePartImagesPagedResponse, error)
	ListSparePartsByDealerPaged(ctx context.Context, in *ListSparePartsByDealerPagedRequest, opts ...grpc.CallOption) (*ListSparePartsByDealerPagedResponse, error)
	ListSparePartsByDealershipPaged(ctx context.Context, in *ListSparePartsByDealershipPagedRequest, opts ...grpc.CallOption) (*ListSparePartsByDealershipPagedResponse, error)
	ListSparePartsPaged(ctx context.Context, in *ListSparePartsPagedRequest, opts ...grpc.CallOption) (*ListSparePartsPagedResponse, error)
	SearchSparePartsPaged(ctx context.Context, in *SearchSparePartsPagedRequest, opts ...grpc.CallOption) (*SearchSparePartsPagedResponse, error)
	UpdateSparePart(ctx context.Context, in *UpdateSparePartRequest, opts ...grpc.CallOption) (*UpdateSparePartResponse, error)
	UpdateSparePartImage(ctx context.Context, in *UpdateSparePartImageRequest, opts ...grpc.CallOption) (*UpdateSparePartImageResponse, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DatabaseService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetUserMeta(ctx context.Context, in *GetUserMetaRequest, opts ...grpc.CallOption) (*GetUserMetaResponse, error) {
	out := new(GetUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertUserMeta(ctx context.Context, in *InsertUserMetaRequest, opts ...grpc.CallOption) (*InsertUserMetaResponse, error) {
	out := new(InsertUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...grpc.CallOption) (*UpdateUserMetaResponse, error) {
	out := new(UpdateUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ChangeDealership(ctx context.Context, in *ChangeDealershipRequest, opts ...grpc.CallOption) (*ChangeDealershipResponse, error) {
	out := new(ChangeDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ChangeDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertDealership(ctx context.Context, in *InsertDealershipRequest, opts ...grpc.CallOption) (*InsertDealershipResponse, error) {
	out := new(InsertDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateDealership(ctx context.Context, in *UpdateDealershipRequest, opts ...grpc.CallOption) (*UpdateDealershipResponse, error) {
	out := new(UpdateDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetDealershipByUserId(ctx context.Context, in *GetUserDealershipRequest, opts ...grpc.CallOption) (*GetDealershipByUserIDResponse, error) {
	out := new(GetDealershipByUserIDResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetDealershipByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetDealershipByID(ctx context.Context, in *GetDealershipByIDRequest, opts ...grpc.CallOption) (*GetDealershipByIDResponse, error) {
	out := new(GetDealershipByIDResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetDealershipByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteDealership(ctx context.Context, in *DeleteDealershipRequest, opts ...grpc.CallOption) (*DeleteDealershipResponse, error) {
	out := new(DeleteDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertCarBrand(ctx context.Context, in *InsertCarBrandRequest, opts ...grpc.CallOption) (*InsertCarBrandResponse, error) {
	out := new(InsertCarBrandResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertCarBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCarBrand(ctx context.Context, in *UpdateCarBrandRequest, opts ...grpc.CallOption) (*UpdateCarBrandResponse, error) {
	out := new(UpdateCarBrandResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCarBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarBrandByID(ctx context.Context, in *GetCarBrandByIDRequest, opts ...grpc.CallOption) (*GetCarBrandByIDResponse, error) {
	out := new(GetCarBrandByIDResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarBrandByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarBrandsPaginated(ctx context.Context, in *GetCarBrandsPaginatedRequest, opts ...grpc.CallOption) (*GetCarBrandsPaginatedResponse, error) {
	out := new(GetCarBrandsPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarBrandsPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCarBrand(ctx context.Context, in *DeleteCarBrandRequest, opts ...grpc.CallOption) (*DeleteCarBrandResponse, error) {
	out := new(DeleteCarBrandResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCarBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertCarExtraFeature(ctx context.Context, in *InsertCarExtraFeatureRequest, opts ...grpc.CallOption) (*InsertCarExtraFeatureResponse, error) {
	out := new(InsertCarExtraFeatureResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertCarExtraFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCarExtraFeature(ctx context.Context, in *UpdateCarExtraFeatureRequest, opts ...grpc.CallOption) (*UpdateCarExtraFeatureResponse, error) {
	out := new(UpdateCarExtraFeatureResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCarExtraFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarExtraFeaturePaginated(ctx context.Context, in *GetCarExtraFeaturesPaginatedRequest, opts ...grpc.CallOption) (*GetCarExtraFeaturesPaginatedResponse, error) {
	out := new(GetCarExtraFeaturesPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarExtraFeaturePaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCarExtraFeature(ctx context.Context, in *DeleteCarExtraFeatureRequest, opts ...grpc.CallOption) (*DeleteCarExtraFeatureResponse, error) {
	out := new(DeleteCarExtraFeatureResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCarExtraFeature_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateCarImage(ctx context.Context, in *CreateCarImageRequest, opts ...grpc.CallOption) (*CreateCarImageResponse, error) {
	out := new(CreateCarImageResponse)
	err := c.cc.Invoke(ctx, DatabaseService_CreateCarImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCarImage(ctx context.Context, in *UpdateCarImageRequest, opts ...grpc.CallOption) (*UpdateCarImageResponse, error) {
	out := new(UpdateCarImageResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCarImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarImagePaginated(ctx context.Context, in *GetCarImagesPaginatedRequest, opts ...grpc.CallOption) (*GetCarImagesPaginatedResponse, error) {
	out := new(GetCarImagesPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarImagePaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCarImage(ctx context.Context, in *DeleteCarImageRequest, opts ...grpc.CallOption) (*DeleteCarImageResponse, error) {
	out := new(DeleteCarImageResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCarImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertCar(ctx context.Context, in *InsertCarRequest, opts ...grpc.CallOption) (*InsertCarResponse, error) {
	out := new(InsertCarResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateCar(ctx context.Context, in *UpdateCarRequest, opts ...grpc.CallOption) (*UpdateCarResponse, error) {
	out := new(UpdateCarResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetOneCar(ctx context.Context, in *GetOneCarRequest, opts ...grpc.CallOption) (*GetOneCarResponse, error) {
	out := new(GetOneCarResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetOneCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarsPaginated(ctx context.Context, in *GetCarsPaginatedRequest, opts ...grpc.CallOption) (*GetCarsPaginatedResponse, error) {
	out := new(GetCarsPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarsPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarsByDealershipIDPaginated(ctx context.Context, in *GetCarsByDealershipIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByDealershipIDPaginatedResponse, error) {
	out := new(GetCarsByDealershipIDPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarsByDealershipIDPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarsByBrandIDPaginated(ctx context.Context, in *GetCarsByBrandIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByCarBrandIDPaginatedResponse, error) {
	out := new(GetCarsByCarBrandIDPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarsByBrandIDPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarsByDealerIDPaginated(ctx context.Context, in *GetCarsByDealerIDPaginatedRequest, opts ...grpc.CallOption) (*GetCarsByDealerIDPaginatedResponse, error) {
	out := new(GetCarsByDealerIDPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarsByDealerIDPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SearchCarsPaginated(ctx context.Context, in *SearchCarsPaginatedRequest, opts ...grpc.CallOption) (*SearchCarsPaginatedResponse, error) {
	out := new(SearchCarsPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_SearchCarsPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarByField(ctx context.Context, in *GetCarByFieldRequest, opts ...grpc.CallOption) (*GetCarByFieldResponse, error) {
	out := new(GetCarByFieldResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarByField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarByDealerCount(ctx context.Context, in *GetCarByDealerCountRequest, opts ...grpc.CallOption) (*GetCarByDealerCountResponse, error) {
	out := new(GetCarByDealerCountResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarByDealerCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarByDealershipCount(ctx context.Context, in *GetCarByDealershipCountRequest, opts ...grpc.CallOption) (*GetCarByDealershipCountResponse, error) {
	out := new(GetCarByDealershipCountResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarByDealershipCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetCarByBrandCount(ctx context.Context, in *GetCarByBrandCountRequest, opts ...grpc.CallOption) (*GetCarByCarBrandCountResponse, error) {
	out := new(GetCarByCarBrandCountResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetCarByBrandCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteCar(ctx context.Context, in *DeleteCarRequest, opts ...grpc.CallOption) (*DeleteCarResponse, error) {
	out := new(DeleteCarResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetSparePartByID(ctx context.Context, in *GetSparePartByIDRequest, opts ...grpc.CallOption) (*GetSparePartByIDResponse, error) {
	out := new(GetSparePartByIDResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetSparePartByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DeleteSparePart(ctx context.Context, in *DeleteSparePartRequest, opts ...grpc.CallOption) (*DeleteSparePartResponse, error) {
	out := new(DeleteSparePartResponse)
	err := c.cc.Invoke(ctx, DatabaseService_DeleteSparePart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FilterSparePartByBrandPaginated(ctx context.Context, in *FilterSparePartByBrandPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByBrandPaginatedResponse, error) {
	out := new(FilterSparePartByBrandPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FilterSparePartByBrandPaginated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FilterSparePartByCategory(ctx context.Context, in *FilterSparePartByCategoryPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByCategoryPaginatedResponse, error) {
	out := new(FilterSparePartByCategoryPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FilterSparePartByCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) FilterSparePartByCarModel(ctx context.Context, in *FilterSparePartByCarModelPaginatedRequest, opts ...grpc.CallOption) (*FilterSparePartByCarModelPaginatedResponse, error) {
	out := new(FilterSparePartByCarModelPaginatedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_FilterSparePartByCarModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetSparePartImageByID(ctx context.Context, in *GetSparePartImageByIDRequest, opts ...grpc.CallOption) (*GetSparePartImageByIDResponse, error) {
	out := new(GetSparePartImageByIDResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetSparePartImageByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertSparePart(ctx context.Context, in *InsertSparePartRequest, opts ...grpc.CallOption) (*InsertSparePartResponse, error) {
	out := new(InsertSparePartResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertSparePart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertSparePartImage(ctx context.Context, in *InsertSparePartImageRequest, opts ...grpc.CallOption) (*InsertSparePartImageResponse, error) {
	out := new(InsertSparePartImageResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertSparePartImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSparePartImagesBySparePartPaged(ctx context.Context, in *ListSparePartImagesBySparePartPagedRequest, opts ...grpc.CallOption) (*ListSparePartImagesBySparePartPagedResponse, error) {
	out := new(ListSparePartImagesBySparePartPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ListSparePartImagesBySparePartPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSparePartImagesPaged(ctx context.Context, in *ListSparePartImagesPagedRequest, opts ...grpc.CallOption) (*ListSparePartImagesPagedResponse, error) {
	out := new(ListSparePartImagesPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ListSparePartImagesPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSparePartsByDealerPaged(ctx context.Context, in *ListSparePartsByDealerPagedRequest, opts ...grpc.CallOption) (*ListSparePartsByDealerPagedResponse, error) {
	out := new(ListSparePartsByDealerPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ListSparePartsByDealerPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSparePartsByDealershipPaged(ctx context.Context, in *ListSparePartsByDealershipPagedRequest, opts ...grpc.CallOption) (*ListSparePartsByDealershipPagedResponse, error) {
	out := new(ListSparePartsByDealershipPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ListSparePartsByDealershipPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ListSparePartsPaged(ctx context.Context, in *ListSparePartsPagedRequest, opts ...grpc.CallOption) (*ListSparePartsPagedResponse, error) {
	out := new(ListSparePartsPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_ListSparePartsPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SearchSparePartsPaged(ctx context.Context, in *SearchSparePartsPagedRequest, opts ...grpc.CallOption) (*SearchSparePartsPagedResponse, error) {
	out := new(SearchSparePartsPagedResponse)
	err := c.cc.Invoke(ctx, DatabaseService_SearchSparePartsPaged_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateSparePart(ctx context.Context, in *UpdateSparePartRequest, opts ...grpc.CallOption) (*UpdateSparePartResponse, error) {
	out := new(UpdateSparePartResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateSparePart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateSparePartImage(ctx context.Context, in *UpdateSparePartImageRequest, opts ...grpc.CallOption) (*UpdateSparePartImageResponse, error) {
	out := new(UpdateSparePartImageResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateSparePartImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility
type DatabaseServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetUserMeta(context.Context, *GetUserMetaRequest) (*GetUserMetaResponse, error)
	InsertUserMeta(context.Context, *InsertUserMetaRequest) (*InsertUserMetaResponse, error)
	UpdateUserMeta(context.Context, *UpdateUserMetaRequest) (*UpdateUserMetaResponse, error)
	ChangeDealership(context.Context, *ChangeDealershipRequest) (*ChangeDealershipResponse, error)
	InsertDealership(context.Context, *InsertDealershipRequest) (*InsertDealershipResponse, error)
	UpdateDealership(context.Context, *UpdateDealershipRequest) (*UpdateDealershipResponse, error)
	GetDealershipByUserId(context.Context, *GetUserDealershipRequest) (*GetDealershipByUserIDResponse, error)
	GetDealershipByID(context.Context, *GetDealershipByIDRequest) (*GetDealershipByIDResponse, error)
	DeleteDealership(context.Context, *DeleteDealershipRequest) (*DeleteDealershipResponse, error)
	InsertCarBrand(context.Context, *InsertCarBrandRequest) (*InsertCarBrandResponse, error)
	UpdateCarBrand(context.Context, *UpdateCarBrandRequest) (*UpdateCarBrandResponse, error)
	GetCarBrandByID(context.Context, *GetCarBrandByIDRequest) (*GetCarBrandByIDResponse, error)
	GetCarBrandsPaginated(context.Context, *GetCarBrandsPaginatedRequest) (*GetCarBrandsPaginatedResponse, error)
	DeleteCarBrand(context.Context, *DeleteCarBrandRequest) (*DeleteCarBrandResponse, error)
	InsertCarExtraFeature(context.Context, *InsertCarExtraFeatureRequest) (*InsertCarExtraFeatureResponse, error)
	UpdateCarExtraFeature(context.Context, *UpdateCarExtraFeatureRequest) (*UpdateCarExtraFeatureResponse, error)
	GetCarExtraFeaturePaginated(context.Context, *GetCarExtraFeaturesPaginatedRequest) (*GetCarExtraFeaturesPaginatedResponse, error)
	DeleteCarExtraFeature(context.Context, *DeleteCarExtraFeatureRequest) (*DeleteCarExtraFeatureResponse, error)
	CreateCarImage(context.Context, *CreateCarImageRequest) (*CreateCarImageResponse, error)
	UpdateCarImage(context.Context, *UpdateCarImageRequest) (*UpdateCarImageResponse, error)
	GetCarImagePaginated(context.Context, *GetCarImagesPaginatedRequest) (*GetCarImagesPaginatedResponse, error)
	DeleteCarImage(context.Context, *DeleteCarImageRequest) (*DeleteCarImageResponse, error)
	InsertCar(context.Context, *InsertCarRequest) (*InsertCarResponse, error)
	UpdateCar(context.Context, *UpdateCarRequest) (*UpdateCarResponse, error)
	GetOneCar(context.Context, *GetOneCarRequest) (*GetOneCarResponse, error)
	GetCarsPaginated(context.Context, *GetCarsPaginatedRequest) (*GetCarsPaginatedResponse, error)
	GetCarsByDealershipIDPaginated(context.Context, *GetCarsByDealershipIDPaginatedRequest) (*GetCarsByDealershipIDPaginatedResponse, error)
	GetCarsByBrandIDPaginated(context.Context, *GetCarsByBrandIDPaginatedRequest) (*GetCarsByCarBrandIDPaginatedResponse, error)
	GetCarsByDealerIDPaginated(context.Context, *GetCarsByDealerIDPaginatedRequest) (*GetCarsByDealerIDPaginatedResponse, error)
	SearchCarsPaginated(context.Context, *SearchCarsPaginatedRequest) (*SearchCarsPaginatedResponse, error)
	GetCarByField(context.Context, *GetCarByFieldRequest) (*GetCarByFieldResponse, error)
	GetCarByDealerCount(context.Context, *GetCarByDealerCountRequest) (*GetCarByDealerCountResponse, error)
	GetCarByDealershipCount(context.Context, *GetCarByDealershipCountRequest) (*GetCarByDealershipCountResponse, error)
	GetCarByBrandCount(context.Context, *GetCarByBrandCountRequest) (*GetCarByCarBrandCountResponse, error)
	DeleteCar(context.Context, *DeleteCarRequest) (*DeleteCarResponse, error)
	GetSparePartByID(context.Context, *GetSparePartByIDRequest) (*GetSparePartByIDResponse, error)
	DeleteSparePart(context.Context, *DeleteSparePartRequest) (*DeleteSparePartResponse, error)
	FilterSparePartByBrandPaginated(context.Context, *FilterSparePartByBrandPaginatedRequest) (*FilterSparePartByBrandPaginatedResponse, error)
	FilterSparePartByCategory(context.Context, *FilterSparePartByCategoryPaginatedRequest) (*FilterSparePartByCategoryPaginatedResponse, error)
	FilterSparePartByCarModel(context.Context, *FilterSparePartByCarModelPaginatedRequest) (*FilterSparePartByCarModelPaginatedResponse, error)
	GetSparePartImageByID(context.Context, *GetSparePartImageByIDRequest) (*GetSparePartImageByIDResponse, error)
	InsertSparePart(context.Context, *InsertSparePartRequest) (*InsertSparePartResponse, error)
	InsertSparePartImage(context.Context, *InsertSparePartImageRequest) (*InsertSparePartImageResponse, error)
	ListSparePartImagesBySparePartPaged(context.Context, *ListSparePartImagesBySparePartPagedRequest) (*ListSparePartImagesBySparePartPagedResponse, error)
	ListSparePartImagesPaged(context.Context, *ListSparePartImagesPagedRequest) (*ListSparePartImagesPagedResponse, error)
	ListSparePartsByDealerPaged(context.Context, *ListSparePartsByDealerPagedRequest) (*ListSparePartsByDealerPagedResponse, error)
	ListSparePartsByDealershipPaged(context.Context, *ListSparePartsByDealershipPagedRequest) (*ListSparePartsByDealershipPagedResponse, error)
	ListSparePartsPaged(context.Context, *ListSparePartsPagedRequest) (*ListSparePartsPagedResponse, error)
	SearchSparePartsPaged(context.Context, *SearchSparePartsPagedRequest) (*SearchSparePartsPagedResponse, error)
	UpdateSparePart(context.Context, *UpdateSparePartRequest) (*UpdateSparePartResponse, error)
	UpdateSparePartImage(context.Context, *UpdateSparePartImageRequest) (*UpdateSparePartImageResponse, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (UnimplementedDatabaseServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDatabaseServiceServer) GetUserMeta(context.Context, *GetUserMetaRequest) (*GetUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertUserMeta(context.Context, *InsertUserMetaRequest) (*InsertUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateUserMeta(context.Context, *UpdateUserMetaRequest) (*UpdateUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) ChangeDealership(context.Context, *ChangeDealershipRequest) (*ChangeDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertDealership(context.Context, *InsertDealershipRequest) (*InsertDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateDealership(context.Context, *UpdateDealershipRequest) (*UpdateDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) GetDealershipByUserId(context.Context, *GetUserDealershipRequest) (*GetDealershipByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealershipByUserId not implemented")
}
func (UnimplementedDatabaseServiceServer) GetDealershipByID(context.Context, *GetDealershipByIDRequest) (*GetDealershipByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealershipByID not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteDealership(context.Context, *DeleteDealershipRequest) (*DeleteDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertCarBrand(context.Context, *InsertCarBrandRequest) (*InsertCarBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCarBrand not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCarBrand(context.Context, *UpdateCarBrandRequest) (*UpdateCarBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarBrand not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarBrandByID(context.Context, *GetCarBrandByIDRequest) (*GetCarBrandByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarBrandByID not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarBrandsPaginated(context.Context, *GetCarBrandsPaginatedRequest) (*GetCarBrandsPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarBrandsPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCarBrand(context.Context, *DeleteCarBrandRequest) (*DeleteCarBrandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarBrand not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertCarExtraFeature(context.Context, *InsertCarExtraFeatureRequest) (*InsertCarExtraFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCarExtraFeature not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCarExtraFeature(context.Context, *UpdateCarExtraFeatureRequest) (*UpdateCarExtraFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarExtraFeature not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarExtraFeaturePaginated(context.Context, *GetCarExtraFeaturesPaginatedRequest) (*GetCarExtraFeaturesPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarExtraFeaturePaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCarExtraFeature(context.Context, *DeleteCarExtraFeatureRequest) (*DeleteCarExtraFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarExtraFeature not implemented")
}
func (UnimplementedDatabaseServiceServer) CreateCarImage(context.Context, *CreateCarImageRequest) (*CreateCarImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarImage not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCarImage(context.Context, *UpdateCarImageRequest) (*UpdateCarImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarImage not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarImagePaginated(context.Context, *GetCarImagesPaginatedRequest) (*GetCarImagesPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarImagePaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCarImage(context.Context, *DeleteCarImageRequest) (*DeleteCarImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarImage not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertCar(context.Context, *InsertCarRequest) (*InsertCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCar not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateCar(context.Context, *UpdateCarRequest) (*UpdateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCar not implemented")
}
func (UnimplementedDatabaseServiceServer) GetOneCar(context.Context, *GetOneCarRequest) (*GetOneCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneCar not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarsPaginated(context.Context, *GetCarsPaginatedRequest) (*GetCarsPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarsByDealershipIDPaginated(context.Context, *GetCarsByDealershipIDPaginatedRequest) (*GetCarsByDealershipIDPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsByDealershipIDPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarsByBrandIDPaginated(context.Context, *GetCarsByBrandIDPaginatedRequest) (*GetCarsByCarBrandIDPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsByBrandIDPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarsByDealerIDPaginated(context.Context, *GetCarsByDealerIDPaginatedRequest) (*GetCarsByDealerIDPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsByDealerIDPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) SearchCarsPaginated(context.Context, *SearchCarsPaginatedRequest) (*SearchCarsPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCarsPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarByField(context.Context, *GetCarByFieldRequest) (*GetCarByFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByField not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarByDealerCount(context.Context, *GetCarByDealerCountRequest) (*GetCarByDealerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByDealerCount not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarByDealershipCount(context.Context, *GetCarByDealershipCountRequest) (*GetCarByDealershipCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByDealershipCount not implemented")
}
func (UnimplementedDatabaseServiceServer) GetCarByBrandCount(context.Context, *GetCarByBrandCountRequest) (*GetCarByCarBrandCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByBrandCount not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteCar(context.Context, *DeleteCarRequest) (*DeleteCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedDatabaseServiceServer) GetSparePartByID(context.Context, *GetSparePartByIDRequest) (*GetSparePartByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSparePartByID not implemented")
}
func (UnimplementedDatabaseServiceServer) DeleteSparePart(context.Context, *DeleteSparePartRequest) (*DeleteSparePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSparePart not implemented")
}
func (UnimplementedDatabaseServiceServer) FilterSparePartByBrandPaginated(context.Context, *FilterSparePartByBrandPaginatedRequest) (*FilterSparePartByBrandPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSparePartByBrandPaginated not implemented")
}
func (UnimplementedDatabaseServiceServer) FilterSparePartByCategory(context.Context, *FilterSparePartByCategoryPaginatedRequest) (*FilterSparePartByCategoryPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSparePartByCategory not implemented")
}
func (UnimplementedDatabaseServiceServer) FilterSparePartByCarModel(context.Context, *FilterSparePartByCarModelPaginatedRequest) (*FilterSparePartByCarModelPaginatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterSparePartByCarModel not implemented")
}
func (UnimplementedDatabaseServiceServer) GetSparePartImageByID(context.Context, *GetSparePartImageByIDRequest) (*GetSparePartImageByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSparePartImageByID not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertSparePart(context.Context, *InsertSparePartRequest) (*InsertSparePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSparePart not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertSparePartImage(context.Context, *InsertSparePartImageRequest) (*InsertSparePartImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSparePartImage not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSparePartImagesBySparePartPaged(context.Context, *ListSparePartImagesBySparePartPagedRequest) (*ListSparePartImagesBySparePartPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparePartImagesBySparePartPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSparePartImagesPaged(context.Context, *ListSparePartImagesPagedRequest) (*ListSparePartImagesPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparePartImagesPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSparePartsByDealerPaged(context.Context, *ListSparePartsByDealerPagedRequest) (*ListSparePartsByDealerPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparePartsByDealerPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSparePartsByDealershipPaged(context.Context, *ListSparePartsByDealershipPagedRequest) (*ListSparePartsByDealershipPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparePartsByDealershipPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) ListSparePartsPaged(context.Context, *ListSparePartsPagedRequest) (*ListSparePartsPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSparePartsPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) SearchSparePartsPaged(context.Context, *SearchSparePartsPagedRequest) (*SearchSparePartsPagedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSparePartsPaged not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateSparePart(context.Context, *UpdateSparePartRequest) (*UpdateSparePartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSparePart not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateSparePartImage(context.Context, *UpdateSparePartImageRequest) (*UpdateSparePartImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSparePartImage not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetUserMeta(ctx, req.(*GetUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertUserMeta(ctx, req.(*InsertUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateUserMeta(ctx, req.(*UpdateUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ChangeDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ChangeDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ChangeDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ChangeDealership(ctx, req.(*ChangeDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertDealership(ctx, req.(*InsertDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateDealership(ctx, req.(*UpdateDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetDealershipByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetDealershipByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetDealershipByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetDealershipByUserId(ctx, req.(*GetUserDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetDealershipByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealershipByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetDealershipByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetDealershipByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetDealershipByID(ctx, req.(*GetDealershipByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteDealership(ctx, req.(*DeleteDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertCarBrand(ctx, req.(*InsertCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCarBrand(ctx, req.(*UpdateCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarBrandByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarBrandByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarBrandByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarBrandByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarBrandByID(ctx, req.(*GetCarBrandByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarBrandsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarBrandsPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarBrandsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarBrandsPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarBrandsPaginated(ctx, req.(*GetCarBrandsPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCarBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarBrandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCarBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCarBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCarBrand(ctx, req.(*DeleteCarBrandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertCarExtraFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCarExtraFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertCarExtraFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertCarExtraFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertCarExtraFeature(ctx, req.(*InsertCarExtraFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCarExtraFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarExtraFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCarExtraFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCarExtraFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCarExtraFeature(ctx, req.(*UpdateCarExtraFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarExtraFeaturePaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarExtraFeaturesPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarExtraFeaturePaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarExtraFeaturePaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarExtraFeaturePaginated(ctx, req.(*GetCarExtraFeaturesPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCarExtraFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarExtraFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCarExtraFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCarExtraFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCarExtraFeature(ctx, req.(*DeleteCarExtraFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateCarImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateCarImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_CreateCarImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateCarImage(ctx, req.(*CreateCarImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCarImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCarImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCarImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCarImage(ctx, req.(*UpdateCarImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarImagePaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarImagesPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarImagePaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarImagePaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarImagePaginated(ctx, req.(*GetCarImagesPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCarImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCarImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCarImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCarImage(ctx, req.(*DeleteCarImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertCar(ctx, req.(*InsertCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateCar(ctx, req.(*UpdateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetOneCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetOneCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetOneCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetOneCar(ctx, req.(*GetOneCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarsPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarsPaginated(ctx, req.(*GetCarsPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarsByDealershipIDPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsByDealershipIDPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarsByDealershipIDPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarsByDealershipIDPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarsByDealershipIDPaginated(ctx, req.(*GetCarsByDealershipIDPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarsByBrandIDPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsByBrandIDPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarsByBrandIDPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarsByBrandIDPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarsByBrandIDPaginated(ctx, req.(*GetCarsByBrandIDPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarsByDealerIDPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsByDealerIDPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarsByDealerIDPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarsByDealerIDPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarsByDealerIDPaginated(ctx, req.(*GetCarsByDealerIDPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SearchCarsPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCarsPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SearchCarsPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_SearchCarsPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SearchCarsPaginated(ctx, req.(*SearchCarsPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarByField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarByFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarByField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarByField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarByField(ctx, req.(*GetCarByFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarByDealerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarByDealerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarByDealerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarByDealerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarByDealerCount(ctx, req.(*GetCarByDealerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarByDealershipCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarByDealershipCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarByDealershipCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarByDealershipCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarByDealershipCount(ctx, req.(*GetCarByDealershipCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetCarByBrandCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarByBrandCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetCarByBrandCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetCarByBrandCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetCarByBrandCount(ctx, req.(*GetCarByBrandCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteCar(ctx, req.(*DeleteCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetSparePartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSparePartByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetSparePartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetSparePartByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetSparePartByID(ctx, req.(*GetSparePartByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DeleteSparePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSparePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DeleteSparePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_DeleteSparePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DeleteSparePart(ctx, req.(*DeleteSparePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FilterSparePartByBrandPaginated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSparePartByBrandPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FilterSparePartByBrandPaginated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FilterSparePartByBrandPaginated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FilterSparePartByBrandPaginated(ctx, req.(*FilterSparePartByBrandPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FilterSparePartByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSparePartByCategoryPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FilterSparePartByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FilterSparePartByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FilterSparePartByCategory(ctx, req.(*FilterSparePartByCategoryPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_FilterSparePartByCarModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterSparePartByCarModelPaginatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).FilterSparePartByCarModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_FilterSparePartByCarModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).FilterSparePartByCarModel(ctx, req.(*FilterSparePartByCarModelPaginatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetSparePartImageByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSparePartImageByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetSparePartImageByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetSparePartImageByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetSparePartImageByID(ctx, req.(*GetSparePartImageByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertSparePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSparePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertSparePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertSparePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertSparePart(ctx, req.(*InsertSparePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertSparePartImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSparePartImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertSparePartImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertSparePartImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertSparePartImage(ctx, req.(*InsertSparePartImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSparePartImagesBySparePartPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparePartImagesBySparePartPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSparePartImagesBySparePartPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSparePartImagesBySparePartPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSparePartImagesBySparePartPaged(ctx, req.(*ListSparePartImagesBySparePartPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSparePartImagesPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparePartImagesPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSparePartImagesPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSparePartImagesPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSparePartImagesPaged(ctx, req.(*ListSparePartImagesPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSparePartsByDealerPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparePartsByDealerPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSparePartsByDealerPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSparePartsByDealerPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSparePartsByDealerPaged(ctx, req.(*ListSparePartsByDealerPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSparePartsByDealershipPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparePartsByDealershipPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSparePartsByDealershipPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSparePartsByDealershipPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSparePartsByDealershipPaged(ctx, req.(*ListSparePartsByDealershipPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ListSparePartsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSparePartsPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ListSparePartsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_ListSparePartsPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ListSparePartsPaged(ctx, req.(*ListSparePartsPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SearchSparePartsPaged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSparePartsPagedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SearchSparePartsPaged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_SearchSparePartsPaged_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SearchSparePartsPaged(ctx, req.(*SearchSparePartsPagedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateSparePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSparePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateSparePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateSparePart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateSparePart(ctx, req.(*UpdateSparePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateSparePartImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSparePartImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateSparePartImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateSparePartImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateSparePartImage(ctx, req.(*UpdateSparePartImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DatabaseService_HealthCheck_Handler,
		},
		{
			MethodName: "GetUserMeta",
			Handler:    _DatabaseService_GetUserMeta_Handler,
		},
		{
			MethodName: "InsertUserMeta",
			Handler:    _DatabaseService_InsertUserMeta_Handler,
		},
		{
			MethodName: "UpdateUserMeta",
			Handler:    _DatabaseService_UpdateUserMeta_Handler,
		},
		{
			MethodName: "ChangeDealership",
			Handler:    _DatabaseService_ChangeDealership_Handler,
		},
		{
			MethodName: "InsertDealership",
			Handler:    _DatabaseService_InsertDealership_Handler,
		},
		{
			MethodName: "UpdateDealership",
			Handler:    _DatabaseService_UpdateDealership_Handler,
		},
		{
			MethodName: "GetDealershipByUserId",
			Handler:    _DatabaseService_GetDealershipByUserId_Handler,
		},
		{
			MethodName: "GetDealershipByID",
			Handler:    _DatabaseService_GetDealershipByID_Handler,
		},
		{
			MethodName: "DeleteDealership",
			Handler:    _DatabaseService_DeleteDealership_Handler,
		},
		{
			MethodName: "InsertCarBrand",
			Handler:    _DatabaseService_InsertCarBrand_Handler,
		},
		{
			MethodName: "UpdateCarBrand",
			Handler:    _DatabaseService_UpdateCarBrand_Handler,
		},
		{
			MethodName: "GetCarBrandByID",
			Handler:    _DatabaseService_GetCarBrandByID_Handler,
		},
		{
			MethodName: "GetCarBrandsPaginated",
			Handler:    _DatabaseService_GetCarBrandsPaginated_Handler,
		},
		{
			MethodName: "DeleteCarBrand",
			Handler:    _DatabaseService_DeleteCarBrand_Handler,
		},
		{
			MethodName: "InsertCarExtraFeature",
			Handler:    _DatabaseService_InsertCarExtraFeature_Handler,
		},
		{
			MethodName: "UpdateCarExtraFeature",
			Handler:    _DatabaseService_UpdateCarExtraFeature_Handler,
		},
		{
			MethodName: "GetCarExtraFeaturePaginated",
			Handler:    _DatabaseService_GetCarExtraFeaturePaginated_Handler,
		},
		{
			MethodName: "DeleteCarExtraFeature",
			Handler:    _DatabaseService_DeleteCarExtraFeature_Handler,
		},
		{
			MethodName: "CreateCarImage",
			Handler:    _DatabaseService_CreateCarImage_Handler,
		},
		{
			MethodName: "UpdateCarImage",
			Handler:    _DatabaseService_UpdateCarImage_Handler,
		},
		{
			MethodName: "GetCarImagePaginated",
			Handler:    _DatabaseService_GetCarImagePaginated_Handler,
		},
		{
			MethodName: "DeleteCarImage",
			Handler:    _DatabaseService_DeleteCarImage_Handler,
		},
		{
			MethodName: "InsertCar",
			Handler:    _DatabaseService_InsertCar_Handler,
		},
		{
			MethodName: "UpdateCar",
			Handler:    _DatabaseService_UpdateCar_Handler,
		},
		{
			MethodName: "GetOneCar",
			Handler:    _DatabaseService_GetOneCar_Handler,
		},
		{
			MethodName: "GetCarsPaginated",
			Handler:    _DatabaseService_GetCarsPaginated_Handler,
		},
		{
			MethodName: "GetCarsByDealershipIDPaginated",
			Handler:    _DatabaseService_GetCarsByDealershipIDPaginated_Handler,
		},
		{
			MethodName: "GetCarsByBrandIDPaginated",
			Handler:    _DatabaseService_GetCarsByBrandIDPaginated_Handler,
		},
		{
			MethodName: "GetCarsByDealerIDPaginated",
			Handler:    _DatabaseService_GetCarsByDealerIDPaginated_Handler,
		},
		{
			MethodName: "SearchCarsPaginated",
			Handler:    _DatabaseService_SearchCarsPaginated_Handler,
		},
		{
			MethodName: "GetCarByField",
			Handler:    _DatabaseService_GetCarByField_Handler,
		},
		{
			MethodName: "GetCarByDealerCount",
			Handler:    _DatabaseService_GetCarByDealerCount_Handler,
		},
		{
			MethodName: "GetCarByDealershipCount",
			Handler:    _DatabaseService_GetCarByDealershipCount_Handler,
		},
		{
			MethodName: "GetCarByBrandCount",
			Handler:    _DatabaseService_GetCarByBrandCount_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _DatabaseService_DeleteCar_Handler,
		},
		{
			MethodName: "GetSparePartByID",
			Handler:    _DatabaseService_GetSparePartByID_Handler,
		},
		{
			MethodName: "DeleteSparePart",
			Handler:    _DatabaseService_DeleteSparePart_Handler,
		},
		{
			MethodName: "FilterSparePartByBrandPaginated",
			Handler:    _DatabaseService_FilterSparePartByBrandPaginated_Handler,
		},
		{
			MethodName: "FilterSparePartByCategory",
			Handler:    _DatabaseService_FilterSparePartByCategory_Handler,
		},
		{
			MethodName: "FilterSparePartByCarModel",
			Handler:    _DatabaseService_FilterSparePartByCarModel_Handler,
		},
		{
			MethodName: "GetSparePartImageByID",
			Handler:    _DatabaseService_GetSparePartImageByID_Handler,
		},
		{
			MethodName: "InsertSparePart",
			Handler:    _DatabaseService_InsertSparePart_Handler,
		},
		{
			MethodName: "InsertSparePartImage",
			Handler:    _DatabaseService_InsertSparePartImage_Handler,
		},
		{
			MethodName: "ListSparePartImagesBySparePartPaged",
			Handler:    _DatabaseService_ListSparePartImagesBySparePartPaged_Handler,
		},
		{
			MethodName: "ListSparePartImagesPaged",
			Handler:    _DatabaseService_ListSparePartImagesPaged_Handler,
		},
		{
			MethodName: "ListSparePartsByDealerPaged",
			Handler:    _DatabaseService_ListSparePartsByDealerPaged_Handler,
		},
		{
			MethodName: "ListSparePartsByDealershipPaged",
			Handler:    _DatabaseService_ListSparePartsByDealershipPaged_Handler,
		},
		{
			MethodName: "ListSparePartsPaged",
			Handler:    _DatabaseService_ListSparePartsPaged_Handler,
		},
		{
			MethodName: "SearchSparePartsPaged",
			Handler:    _DatabaseService_SearchSparePartsPaged_Handler,
		},
		{
			MethodName: "UpdateSparePart",
			Handler:    _DatabaseService_UpdateSparePart_Handler,
		},
		{
			MethodName: "UpdateSparePartImage",
			Handler:    _DatabaseService_UpdateSparePartImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
