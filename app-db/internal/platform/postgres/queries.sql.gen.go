// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const carByBrandCount = `-- name: CarByBrandCount :one
SELECT COUNT(*) FROM cars WHERE brand_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CarByBrandCount(ctx context.Context, brandID string) (int64, error) {
	row := q.db.QueryRow(ctx, carByBrandCount, brandID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const carByDealerCount = `-- name: CarByDealerCount :one
SELECT COUNT(*) FROM cars WHERE dealer_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CarByDealerCount(ctx context.Context, dealerID pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, carByDealerCount, dealerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const carByDealershipCount = `-- name: CarByDealershipCount :one
SELECT COUNT(*) FROM cars WHERE dealership_id = $1 AND deleted_at IS NULL
`

func (q *Queries) CarByDealershipCount(ctx context.Context, dealershipID pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, carByDealershipCount, dealershipID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const carsByDealerPaged = `-- name: CarsByDealerPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE dealer_id = $1  AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type CarsByDealerPagedParams struct {
	DealerID pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) CarsByDealerPaged(ctx context.Context, arg CarsByDealerPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, carsByDealerPaged, arg.DealerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const carsByDealershipPaged = `-- name: CarsByDealershipPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE dealership_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type CarsByDealershipPagedParams struct {
	DealershipID pgtype.Text
	Limit        int32
	Offset       int32
}

func (q *Queries) CarsByDealershipPaged(ctx context.Context, arg CarsByDealershipPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, carsByDealershipPaged, arg.DealershipID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCarBrand = `-- name: CreateCarBrand :one
INSERT INTO car_brands (
    brand_id, name, country, logo_url, created_at,
    updated_at
)
VALUES
    ($1, $2, $3, $4, now(), now()) RETURNING brand_id, name, country, logo_url, created_at, updated_at
`

type CreateCarBrandParams struct {
	BrandID string
	Name    pgtype.Text
	Country pgtype.Text
	LogoUrl pgtype.Text
}

func (q *Queries) CreateCarBrand(ctx context.Context, arg CreateCarBrandParams) (CarBrand, error) {
	row := q.db.QueryRow(ctx, createCarBrand,
		arg.BrandID,
		arg.Name,
		arg.Country,
		arg.LogoUrl,
	)
	var i CarBrand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createCarImage = `-- name: CreateCarImage :one
INSERT INTO car_images (
    car_image_id, car_id, image_url, created_at,
    updated_at
) VALUES ($1, $2, $3, now(), now()) RETURNING car_image_id
`

type CreateCarImageParams struct {
	CarImageID string
	CarID      string
	ImageUrl   pgtype.Text
}

func (q *Queries) CreateCarImage(ctx context.Context, arg CreateCarImageParams) (string, error) {
	row := q.db.QueryRow(ctx, createCarImage, arg.CarImageID, arg.CarID, arg.ImageUrl)
	var car_image_id string
	err := row.Scan(&car_image_id)
	return car_image_id, err
}

const deleteCar = `-- name: DeleteCar :one
UPDATE cars SET deleted_at = now() , updated_at = now() WHERE car_id = $1 RETURNING car_id
`

func (q *Queries) DeleteCar(ctx context.Context, carID string) (string, error) {
	row := q.db.QueryRow(ctx, deleteCar, carID)
	var car_id string
	err := row.Scan(&car_id)
	return car_id, err
}

const deleteCarBrand = `-- name: DeleteCarBrand :one
UPDATE car_brands SET deleted_at = now(), updated_at = now() WHERE brand_id = $1 RETURNING brand_id, name, country, logo_url, created_at, updated_at
`

func (q *Queries) DeleteCarBrand(ctx context.Context, brandID string) (CarBrand, error) {
	row := q.db.QueryRow(ctx, deleteCarBrand, brandID)
	var i CarBrand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCarImage = `-- name: DeleteCarImage :one
UPDATE car_images SET deleted_at = now() WHERE car_image_id = $1 RETURNING car_image_id, car_id, image_url, created_at, updated_at
`

func (q *Queries) DeleteCarImage(ctx context.Context, carImageID string) (CarImage, error) {
	row := q.db.QueryRow(ctx, deleteCarImage, carImageID)
	var i CarImage
	err := row.Scan(
		&i.CarImageID,
		&i.CarID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDealership = `-- name: DeleteDealership :one
UPDATE dealership SET deleted_at = now(), updated_at = now() WHERE dealership_id = $1 RETURNING dealership_id, owner_id, name, display_name, address, city, state, zip, phone, email, website, facebook_url, twitter_url, instagram_url, linkedin_url, logo_url, cover_url, description, created_at, updated_at
`

func (q *Queries) DeleteDealership(ctx context.Context, dealershipID string) (Dealership, error) {
	row := q.db.QueryRow(ctx, deleteDealership, dealershipID)
	var i Dealership
	err := row.Scan(
		&i.DealershipID,
		&i.OwnerID,
		&i.Name,
		&i.DisplayName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.LogoUrl,
		&i.CoverUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExtraFeature = `-- name: DeleteExtraFeature :one
UPDATE car_extra_features SET deleted_at = now(), updated_at = now() WHERE car_extra_feature_id = $1 RETURNING car_extra_feature_id, car_id, name, value, created_at, updated_at
`

func (q *Queries) DeleteExtraFeature(ctx context.Context, carExtraFeatureID string) (CarExtraFeature, error) {
	row := q.db.QueryRow(ctx, deleteExtraFeature, carExtraFeatureID)
	var i CarExtraFeature
	err := row.Scan(
		&i.CarExtraFeatureID,
		&i.CarID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSparePart = `-- name: DeleteSparePart :one
UPDATE spare_parts SET deleted_at = now() , updated_at = now() WHERE spare_part_id = $1 RETURNING spare_part_id
`

func (q *Queries) DeleteSparePart(ctx context.Context, sparePartID string) (string, error) {
	row := q.db.QueryRow(ctx, deleteSparePart, sparePartID)
	var spare_part_id string
	err := row.Scan(&spare_part_id)
	return spare_part_id, err
}

const deleteSparePartImage = `-- name: DeleteSparePartImage :one
UPDATE spare_part_images SET deleted_at = now() , updated_at = now() WHERE spare_part_image_id = $1 RETURNING spare_part_image_id
`

func (q *Queries) DeleteSparePartImage(ctx context.Context, sparePartImageID string) (string, error) {
	row := q.db.QueryRow(ctx, deleteSparePartImage, sparePartImageID)
	var spare_part_image_id string
	err := row.Scan(&spare_part_image_id)
	return spare_part_image_id, err
}

const filterSparePartsByBrand = `-- name: FilterSparePartsByBrand :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE car_brand = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FilterSparePartsByBrandParams struct {
	CarBrand pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) FilterSparePartsByBrand(ctx context.Context, arg FilterSparePartsByBrandParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, filterSparePartsByBrand, arg.CarBrand, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterSparePartsByCategory = `-- name: FilterSparePartsByCategory :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE category = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FilterSparePartsByCategoryParams struct {
	Category pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) FilterSparePartsByCategory(ctx context.Context, arg FilterSparePartsByCategoryParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, filterSparePartsByCategory, arg.Category, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterSparePartsByModel = `-- name: FilterSparePartsByModel :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE car_model = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type FilterSparePartsByModelParams struct {
	CarModel pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) FilterSparePartsByModel(ctx context.Context, arg FilterSparePartsByModelParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, filterSparePartsByModel, arg.CarModel, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCarBrandById = `-- name: GetCarBrandById :one
SELECT
    brand_id, name, country, logo_url, created_at, updated_at
FROM
    car_brands
WHERE
        brand_id = $1
AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) GetCarBrandById(ctx context.Context, brandID string) (CarBrand, error) {
	row := q.db.QueryRow(ctx, getCarBrandById, brandID)
	var i CarBrand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCarById = `-- name: GetCarById :one
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE car_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetCarById(ctx context.Context, carID string) (Car, error) {
	row := q.db.QueryRow(ctx, getCarById, carID)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.BrandID,
		&i.Model,
		&i.Year,
		&i.Price,
		&i.Mileage,
		&i.Color,
		&i.Transmission,
		&i.FuelType,
		&i.EngineCapacity,
		&i.Description,
		&i.DealershipID,
		&i.DealerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Title,
		&i.IsFeatured,
		&i.IsSold,
		&i.HorsePower,
		&i.Torque,
		&i.TorqueRpm,
		&i.SafetySpecifications,
		&i.PerformanceSpecifications,
		&i.ComfortSpecifications,
		&i.Location,
		&i.Ownership,
	)
	return i, err
}

const getDealershipById = `-- name: GetDealershipById :one
SELECT
    dealership_id, owner_id, name, display_name, address, city, state, zip, phone, email, website, facebook_url, twitter_url, instagram_url, linkedin_url, logo_url, cover_url, description, created_at, updated_at
FROM
    dealership
WHERE
        dealership_id = $1
AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) GetDealershipById(ctx context.Context, dealershipID string) (Dealership, error) {
	row := q.db.QueryRow(ctx, getDealershipById, dealershipID)
	var i Dealership
	err := row.Scan(
		&i.DealershipID,
		&i.OwnerID,
		&i.Name,
		&i.DisplayName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.LogoUrl,
		&i.CoverUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSparePartById = `-- name: GetSparePartById :one
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE spare_part_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetSparePartById(ctx context.Context, sparePartID string) (SparePart, error) {
	row := q.db.QueryRow(ctx, getSparePartById, sparePartID)
	var i SparePart
	err := row.Scan(
		&i.SparePartID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.Used,
		&i.CarModel,
		&i.CarBrand,
		&i.OtherCompatibleCars,
		&i.CarYear,
		&i.IsUniversal,
		&i.Category,
		&i.PartNumber,
		&i.DealershipID,
		&i.DealerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSparePartImageById = `-- name: GetSparePartImageById :one
SELECT spare_part_image_id, spare_part_id, image_url, created_at, updated_at, deleted_at FROM spare_part_images WHERE spare_part_image_id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetSparePartImageById(ctx context.Context, sparePartImageID string) (SparePartImage, error) {
	row := q.db.QueryRow(ctx, getSparePartImageById, sparePartImageID)
	var i SparePartImage
	err := row.Scan(
		&i.SparePartImageID,
		&i.SparePartID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserDealership = `-- name: GetUserDealership :one
SELECT
    d.dealership_id, d.owner_id, d.name, d.display_name, d.address, d.city, d.state, d.zip, d.phone, d.email, d.website, d.facebook_url, d.twitter_url, d.instagram_url, d.linkedin_url, d.logo_url, d.cover_url, d.description, d.created_at, d.updated_at
FROM
    dealership d
        JOIN user_meta u ON d.dealership_id = u.dealership_id
WHERE
        u.user_id = $1
AND d.deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) GetUserDealership(ctx context.Context, userID string) (Dealership, error) {
	row := q.db.QueryRow(ctx, getUserDealership, userID)
	var i Dealership
	err := row.Scan(
		&i.DealershipID,
		&i.OwnerID,
		&i.Name,
		&i.DisplayName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.LogoUrl,
		&i.CoverUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserMeta = `-- name: GetUserMeta :one
SELECT
    user_meta_id, user_id, facebook_url, twitter_url, instagram_url, linkedin_url, website_url, dealership_id
FROM
    user_meta
WHERE
        user_id = $1
AND deleted_at IS NULL
LIMIT
    1
`

func (q *Queries) GetUserMeta(ctx context.Context, userID string) (UserMetum, error) {
	row := q.db.QueryRow(ctx, getUserMeta, userID)
	var i UserMetum
	err := row.Scan(
		&i.UserMetaID,
		&i.UserID,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.WebsiteUrl,
		&i.DealershipID,
	)
	return i, err
}

const insertCar = `-- name: InsertCar :one
INSERT INTO cars (
    car_id, brand_id, model,
    year, price, mileage, color, transmission,
    fuel_type, engine_capacity, description,
    dealership_id, dealer_id, comfort_specifications, safety_specifications, performance_specifications,
    horse_power, torque, torque_rpm ,ownership, title,
    created_at,updated_at
)
VALUES
    (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
        $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,$21, now(), now()
    ) RETURNING car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership
`

type InsertCarParams struct {
	CarID                     string
	BrandID                   string
	Model                     pgtype.Text
	Year                      pgtype.Int4
	Price                     pgtype.Numeric
	Mileage                   pgtype.Int4
	Color                     pgtype.Text
	Transmission              pgtype.Text
	FuelType                  pgtype.Text
	EngineCapacity            pgtype.Int4
	Description               pgtype.Text
	DealershipID              pgtype.Text
	DealerID                  pgtype.Text
	ComfortSpecifications     pgtype.Array[string]
	SafetySpecifications      pgtype.Array[string]
	PerformanceSpecifications pgtype.Array[string]
	HorsePower                pgtype.Int4
	Torque                    pgtype.Int4
	TorqueRpm                 pgtype.Int4
	Ownership                 pgtype.Text
	Title                     pgtype.Text
}

func (q *Queries) InsertCar(ctx context.Context, arg InsertCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, insertCar,
		arg.CarID,
		arg.BrandID,
		arg.Model,
		arg.Year,
		arg.Price,
		arg.Mileage,
		arg.Color,
		arg.Transmission,
		arg.FuelType,
		arg.EngineCapacity,
		arg.Description,
		arg.DealershipID,
		arg.DealerID,
		arg.ComfortSpecifications,
		arg.SafetySpecifications,
		arg.PerformanceSpecifications,
		arg.HorsePower,
		arg.Torque,
		arg.TorqueRpm,
		arg.Ownership,
		arg.Title,
	)
	var i Car
	err := row.Scan(
		&i.CarID,
		&i.BrandID,
		&i.Model,
		&i.Year,
		&i.Price,
		&i.Mileage,
		&i.Color,
		&i.Transmission,
		&i.FuelType,
		&i.EngineCapacity,
		&i.Description,
		&i.DealershipID,
		&i.DealerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Title,
		&i.IsFeatured,
		&i.IsSold,
		&i.HorsePower,
		&i.Torque,
		&i.TorqueRpm,
		&i.SafetySpecifications,
		&i.PerformanceSpecifications,
		&i.ComfortSpecifications,
		&i.Location,
		&i.Ownership,
	)
	return i, err
}

const insertDealership = `-- name: InsertDealership :one
INSERT INTO dealership (
    dealership_id, owner_id, name, display_name,
    address, city, state, zip, phone, email,
    website, facebook_url, twitter_url,
    instagram_url, linkedin_url, logo_url,
    cover_url, description, created_at,
    updated_at
)
VALUES
    (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
        $11, $12, $13, $14, $15, $16, $17, $18,
        now(), now()
    ) RETURNING dealership_id, owner_id, name, display_name, address, city, state, zip, phone, email, website, facebook_url, twitter_url, instagram_url, linkedin_url, logo_url, cover_url, description, created_at, updated_at
`

type InsertDealershipParams struct {
	DealershipID string
	OwnerID      string
	Name         string
	DisplayName  string
	Address      string
	City         string
	State        string
	Zip          string
	Phone        string
	Email        string
	Website      string
	FacebookUrl  string
	TwitterUrl   string
	InstagramUrl string
	LinkedinUrl  string
	LogoUrl      string
	CoverUrl     string
	Description  string
}

func (q *Queries) InsertDealership(ctx context.Context, arg InsertDealershipParams) (Dealership, error) {
	row := q.db.QueryRow(ctx, insertDealership,
		arg.DealershipID,
		arg.OwnerID,
		arg.Name,
		arg.DisplayName,
		arg.Address,
		arg.City,
		arg.State,
		arg.Zip,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.FacebookUrl,
		arg.TwitterUrl,
		arg.InstagramUrl,
		arg.LinkedinUrl,
		arg.LogoUrl,
		arg.CoverUrl,
		arg.Description,
	)
	var i Dealership
	err := row.Scan(
		&i.DealershipID,
		&i.OwnerID,
		&i.Name,
		&i.DisplayName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.LogoUrl,
		&i.CoverUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertExtraFeature = `-- name: InsertExtraFeature :one
INSERT INTO car_extra_features (
    car_extra_feature_id, car_id, name, value , created_at,
    updated_at
) VALUES ($1, $2, $3, $4, now(), now()) RETURNING car_extra_feature_id, car_id, name, value, created_at, updated_at
`

type InsertExtraFeatureParams struct {
	CarExtraFeatureID string
	CarID             string
	Name              pgtype.Text
	Value             pgtype.Text
}

func (q *Queries) InsertExtraFeature(ctx context.Context, arg InsertExtraFeatureParams) (CarExtraFeature, error) {
	row := q.db.QueryRow(ctx, insertExtraFeature,
		arg.CarExtraFeatureID,
		arg.CarID,
		arg.Name,
		arg.Value,
	)
	var i CarExtraFeature
	err := row.Scan(
		&i.CarExtraFeatureID,
		&i.CarID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertSparePart = `-- name: InsertSparePart :one
INSERT INTO spare_parts (
    spare_part_id,name,description,price,used,
    car_model,car_brand,other_compatible_cars,
    car_year,is_universal,category,
    part_number,dealership_id,dealer_id,created_at,
    updated_at,deleted_at
) VALUES (
    $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    NULL
) RETURNING spare_part_id
`

type InsertSparePartParams struct {
	SparePartID         string
	Name                pgtype.Text
	Description         pgtype.Text
	Price               pgtype.Numeric
	Used                pgtype.Bool
	CarModel            pgtype.Text
	CarBrand            pgtype.Text
	OtherCompatibleCars pgtype.Array[string]
	CarYear             pgtype.Int4
	IsUniversal         pgtype.Bool
	Category            pgtype.Text
	PartNumber          pgtype.Text
	DealershipID        pgtype.Text
	DealerID            pgtype.Text
}

func (q *Queries) InsertSparePart(ctx context.Context, arg InsertSparePartParams) (string, error) {
	row := q.db.QueryRow(ctx, insertSparePart,
		arg.SparePartID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Used,
		arg.CarModel,
		arg.CarBrand,
		arg.OtherCompatibleCars,
		arg.CarYear,
		arg.IsUniversal,
		arg.Category,
		arg.PartNumber,
		arg.DealershipID,
		arg.DealerID,
	)
	var spare_part_id string
	err := row.Scan(&spare_part_id)
	return spare_part_id, err
}

const insertSparePartImage = `-- name: InsertSparePartImage :one
INSERT INTO spare_part_images (
    spare_part_image_id,spare_part_id,image_url,
    created_at,updated_at,deleted_at
) VALUES (
    $1,$2,$3,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,NULL
) RETURNING spare_part_image_id
`

type InsertSparePartImageParams struct {
	SparePartImageID string
	SparePartID      string
	ImageUrl         pgtype.Text
}

func (q *Queries) InsertSparePartImage(ctx context.Context, arg InsertSparePartImageParams) (string, error) {
	row := q.db.QueryRow(ctx, insertSparePartImage, arg.SparePartImageID, arg.SparePartID, arg.ImageUrl)
	var spare_part_image_id string
	err := row.Scan(&spare_part_image_id)
	return spare_part_image_id, err
}

const insertUserMeta = `-- name: InsertUserMeta :one
INSERT INTO user_meta (
    user_meta_id, user_id, facebook_url,
    twitter_url, instagram_url, linkedin_url,
    website_url, dealership_id, created_at, updated_at
)
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, now(), now()) RETURNING user_meta_id, user_id, facebook_url, twitter_url, instagram_url, linkedin_url, website_url, dealership_id
`

type InsertUserMetaParams struct {
	UserMetaID   string
	UserID       string
	FacebookUrl  pgtype.Text
	TwitterUrl   pgtype.Text
	InstagramUrl pgtype.Text
	LinkedinUrl  pgtype.Text
	WebsiteUrl   pgtype.Text
	DealershipID pgtype.Text
}

func (q *Queries) InsertUserMeta(ctx context.Context, arg InsertUserMetaParams) (UserMetum, error) {
	row := q.db.QueryRow(ctx, insertUserMeta,
		arg.UserMetaID,
		arg.UserID,
		arg.FacebookUrl,
		arg.TwitterUrl,
		arg.InstagramUrl,
		arg.LinkedinUrl,
		arg.WebsiteUrl,
		arg.DealershipID,
	)
	var i UserMetum
	err := row.Scan(
		&i.UserMetaID,
		&i.UserID,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.WebsiteUrl,
		&i.DealershipID,
	)
	return i, err
}

const insertUserMetaWithoutDealership = `-- name: InsertUserMetaWithoutDealership :one
INSERT INTO user_meta (
    user_meta_id, user_id, facebook_url,
    twitter_url, instagram_url, linkedin_url,
    website_url
)
VALUES
    ($1, $2, $3, $4, $5, $6, $7) RETURNING user_meta_id, user_id, facebook_url, twitter_url, instagram_url, linkedin_url, website_url, dealership_id
`

type InsertUserMetaWithoutDealershipParams struct {
	UserMetaID   string
	UserID       string
	FacebookUrl  pgtype.Text
	TwitterUrl   pgtype.Text
	InstagramUrl pgtype.Text
	LinkedinUrl  pgtype.Text
	WebsiteUrl   pgtype.Text
}

func (q *Queries) InsertUserMetaWithoutDealership(ctx context.Context, arg InsertUserMetaWithoutDealershipParams) (UserMetum, error) {
	row := q.db.QueryRow(ctx, insertUserMetaWithoutDealership,
		arg.UserMetaID,
		arg.UserID,
		arg.FacebookUrl,
		arg.TwitterUrl,
		arg.InstagramUrl,
		arg.LinkedinUrl,
		arg.WebsiteUrl,
	)
	var i UserMetum
	err := row.Scan(
		&i.UserMetaID,
		&i.UserID,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.WebsiteUrl,
		&i.DealershipID,
	)
	return i, err
}

const listCarBrandsPaged = `-- name: ListCarBrandsPaged :many
SELECT
    brand_id, name, country, logo_url, created_at, updated_at
FROM
    car_brands
WHERE
        deleted_at IS NULL
ORDER BY
    name ASC
LIMIT
    $1 OFFSET $2
`

type ListCarBrandsPagedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCarBrandsPaged(ctx context.Context, arg ListCarBrandsPagedParams) ([]CarBrand, error) {
	rows, err := q.db.Query(ctx, listCarBrandsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CarBrand
	for rows.Next() {
		var i CarBrand
		if err := rows.Scan(
			&i.BrandID,
			&i.Name,
			&i.Country,
			&i.LogoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCarImagesForCar = `-- name: ListCarImagesForCar :many
SELECT
    car_image_id, car_id, image_url, created_at, updated_at
FROM
    car_images
WHERE
        car_id = $1
AND deleted_at IS NULL
ORDER BY
    created_at ASC
`

func (q *Queries) ListCarImagesForCar(ctx context.Context, carID string) ([]CarImage, error) {
	rows, err := q.db.Query(ctx, listCarImagesForCar, carID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CarImage
	for rows.Next() {
		var i CarImage
		if err := rows.Scan(
			&i.CarImageID,
			&i.CarID,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCarsByBrandPaged = `-- name: ListCarsByBrandPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE brand_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListCarsByBrandPagedParams struct {
	BrandID string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListCarsByBrandPaged(ctx context.Context, arg ListCarsByBrandPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, listCarsByBrandPaged, arg.BrandID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCarsByDealerPaged = `-- name: ListCarsByDealerPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE dealer_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListCarsByDealerPagedParams struct {
	DealerID pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) ListCarsByDealerPaged(ctx context.Context, arg ListCarsByDealerPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, listCarsByDealerPaged, arg.DealerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCarsByDealershipPaged = `-- name: ListCarsByDealershipPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE dealership_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListCarsByDealershipPagedParams struct {
	DealershipID pgtype.Text
	Limit        int32
	Offset       int32
}

func (q *Queries) ListCarsByDealershipPaged(ctx context.Context, arg ListCarsByDealershipPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, listCarsByDealershipPaged, arg.DealershipID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCarsPaged = `-- name: ListCarsPaged :many
SELECT car_id, brand_id, model, year, price, mileage, color, transmission, fuel_type, engine_capacity, description, dealership_id, dealer_id, created_at, updated_at, status, title, is_featured, is_sold, horse_power, torque, torque_rpm, safety_specifications, performance_specifications, comfort_specifications, location, ownership FROM cars WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListCarsPagedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCarsPaged(ctx context.Context, arg ListCarsPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, listCarsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExtraFeaturesForCar = `-- name: ListExtraFeaturesForCar :many
SELECT
    car_extra_feature_id, car_id, name, value, created_at, updated_at
FROM
    car_extra_features
WHERE
        car_id = $1
AND deleted_at IS NULL
ORDER BY
    name ASC
`

func (q *Queries) ListExtraFeaturesForCar(ctx context.Context, carID string) ([]CarExtraFeature, error) {
	rows, err := q.db.Query(ctx, listExtraFeaturesForCar, carID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CarExtraFeature
	for rows.Next() {
		var i CarExtraFeature
		if err := rows.Scan(
			&i.CarExtraFeatureID,
			&i.CarID,
			&i.Name,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSparePartImagesBySparePartPaged = `-- name: ListSparePartImagesBySparePartPaged :many
SELECT spare_part_image_id, spare_part_id, image_url, created_at, updated_at, deleted_at FROM spare_part_images WHERE spare_part_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListSparePartImagesBySparePartPagedParams struct {
	SparePartID string
	Limit       int32
	Offset      int32
}

func (q *Queries) ListSparePartImagesBySparePartPaged(ctx context.Context, arg ListSparePartImagesBySparePartPagedParams) ([]SparePartImage, error) {
	rows, err := q.db.Query(ctx, listSparePartImagesBySparePartPaged, arg.SparePartID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePartImage
	for rows.Next() {
		var i SparePartImage
		if err := rows.Scan(
			&i.SparePartImageID,
			&i.SparePartID,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSparePartImagesPaged = `-- name: ListSparePartImagesPaged :many
SELECT spare_part_image_id, spare_part_id, image_url, created_at, updated_at, deleted_at FROM spare_part_images WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListSparePartImagesPagedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSparePartImagesPaged(ctx context.Context, arg ListSparePartImagesPagedParams) ([]SparePartImage, error) {
	rows, err := q.db.Query(ctx, listSparePartImagesPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePartImage
	for rows.Next() {
		var i SparePartImage
		if err := rows.Scan(
			&i.SparePartImageID,
			&i.SparePartID,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSparePartsByDealerPaged = `-- name: ListSparePartsByDealerPaged :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE dealer_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListSparePartsByDealerPagedParams struct {
	DealerID pgtype.Text
	Limit    int32
	Offset   int32
}

func (q *Queries) ListSparePartsByDealerPaged(ctx context.Context, arg ListSparePartsByDealerPagedParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, listSparePartsByDealerPaged, arg.DealerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSparePartsByDealershipPaged = `-- name: ListSparePartsByDealershipPaged :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE dealership_id = $1 AND deleted_at IS NULL ORDER BY created_at DESC LIMIT $2 OFFSET $3
`

type ListSparePartsByDealershipPagedParams struct {
	DealershipID pgtype.Text
	Limit        int32
	Offset       int32
}

func (q *Queries) ListSparePartsByDealershipPaged(ctx context.Context, arg ListSparePartsByDealershipPagedParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, listSparePartsByDealershipPaged, arg.DealershipID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSparePartsPaged = `-- name: ListSparePartsPaged :many
SELECT spare_part_id, name, description, price, used, car_model, car_brand, other_compatible_cars, car_year, is_universal, category, part_number, dealership_id, dealer_id, created_at, updated_at, deleted_at FROM spare_parts WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListSparePartsPagedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSparePartsPaged(ctx context.Context, arg ListSparePartsPagedParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, listSparePartsPaged, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCarsPaged = `-- name: SearchCarsPaged :many
SELECT
    c.car_id, c.brand_id, c.model, c.year, c.price, c.mileage, c.color, c.transmission, c.fuel_type, c.engine_capacity, c.description, c.dealership_id, c.dealer_id, c.created_at, c.updated_at, c.status, c.title, c.is_featured, c.is_sold, c.horse_power, c.torque, c.torque_rpm, c.safety_specifications, c.performance_specifications, c.comfort_specifications, c.location, c.ownership
FROM
    cars c
    LEFT JOIN car_extra_features f ON c.car_id = f.car_id
    LEFT JOIN car_brands b ON c.brand_id = b.brand_id
WHERE
    (LOWER(c.model) LIKE LOWER($1)
    OR LOWER(c.description) LIKE LOWER($1)
    OR LOWER(c.color) LIKE LOWER($1)
    OR LOWER(c.transmission) LIKE LOWER($1)
    OR LOWER(c.fuel_type) LIKE LOWER($1)
    OR LOWER(f.name) LIKE LOWER($1)
    OR LOWER(f.value) LIKE LOWER($1)
    OR LOWER(b.name) LIKE LOWER($1)
    OR LOWER(b.country) LIKE LOWER($1))
    AND c.deleted_at IS NULL
ORDER BY f.created_at DESC LIMIT $2 OFFSET $3
`

type SearchCarsPagedParams struct {
	Lower  string
	Limit  int32
	Offset int32
}

func (q *Queries) SearchCarsPaged(ctx context.Context, arg SearchCarsPagedParams) ([]Car, error) {
	rows, err := q.db.Query(ctx, searchCarsPaged, arg.Lower, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.CarID,
			&i.BrandID,
			&i.Model,
			&i.Year,
			&i.Price,
			&i.Mileage,
			&i.Color,
			&i.Transmission,
			&i.FuelType,
			&i.EngineCapacity,
			&i.Description,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Title,
			&i.IsFeatured,
			&i.IsSold,
			&i.HorsePower,
			&i.Torque,
			&i.TorqueRpm,
			&i.SafetySpecifications,
			&i.PerformanceSpecifications,
			&i.ComfortSpecifications,
			&i.Location,
			&i.Ownership,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSparePartsPaged = `-- name: SearchSparePartsPaged :many
SELECT
    s.spare_part_id, s.name, s.description, s.price, s.used, s.car_model, s.car_brand, s.other_compatible_cars, s.car_year, s.is_universal, s.category, s.part_number, s.dealership_id, s.dealer_id, s.created_at, s.updated_at, s.deleted_at
FROM
    spare_parts s
WHERE
    (LOWER(s.name) LIKE LOWER($1)
    OR LOWER(s.description) LIKE LOWER($1)
    OR LOWER(s.car_model) LIKE LOWER($1)
    OR LOWER(s.car_brand) LIKE LOWER($1)
    OR LOWER(s.other_compatible_cars) LIKE LOWER($1)
    OR LOWER(s.category) LIKE LOWER($1)
    OR LOWER(s.part_number) LIKE LOWER($1))
    AND s.deleted_at IS NULL ORDER BY s.created_at DESC LIMIT $2 OFFSET $3
`

type SearchSparePartsPagedParams struct {
	Lower  string
	Limit  int32
	Offset int32
}

func (q *Queries) SearchSparePartsPaged(ctx context.Context, arg SearchSparePartsPagedParams) ([]SparePart, error) {
	rows, err := q.db.Query(ctx, searchSparePartsPaged, arg.Lower, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SparePart
	for rows.Next() {
		var i SparePart
		if err := rows.Scan(
			&i.SparePartID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Used,
			&i.CarModel,
			&i.CarBrand,
			&i.OtherCompatibleCars,
			&i.CarYear,
			&i.IsUniversal,
			&i.Category,
			&i.PartNumber,
			&i.DealershipID,
			&i.DealerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sparePartsByDealerCount = `-- name: SparePartsByDealerCount :one
SELECT COUNT(*) FROM spare_parts WHERE dealer_id = $1 AND deleted_at IS NULL
`

func (q *Queries) SparePartsByDealerCount(ctx context.Context, dealerID pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, sparePartsByDealerCount, dealerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const sparePartsByDealershipCount = `-- name: SparePartsByDealershipCount :one
SELECT COUNT(*) FROM spare_parts WHERE dealership_id = $1 AND deleted_at IS NULL
`

func (q *Queries) SparePartsByDealershipCount(ctx context.Context, dealershipID pgtype.Text) (int64, error) {
	row := q.db.QueryRow(ctx, sparePartsByDealershipCount, dealershipID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCar = `-- name: UpdateCar :one
UPDATE
    cars
SET
    brand_id = $2,
    model = $3,
    year = $4,
    price = $5,
    mileage = $6,
    color = $7,
    transmission = $8,
    fuel_type = $9,
    engine_capacity = $10,
    description = $11,
    dealership_id = $12,
    dealer_id = $13,
    status = $14,
    horse_power = $15,
    torque = $16,
    safety_specifications = $17,
    comfort_specifications = $18,
    ownership = $19,
    title = $20,
    updated_at = now()
WHERE
        car_id = $1 RETURNING car_id
`

type UpdateCarParams struct {
	CarID                 string
	BrandID               string
	Model                 pgtype.Text
	Year                  pgtype.Int4
	Price                 pgtype.Numeric
	Mileage               pgtype.Int4
	Color                 pgtype.Text
	Transmission          pgtype.Text
	FuelType              pgtype.Text
	EngineCapacity        pgtype.Int4
	Description           pgtype.Text
	DealershipID          pgtype.Text
	DealerID              pgtype.Text
	Status                pgtype.Text
	HorsePower            pgtype.Int4
	Torque                pgtype.Int4
	SafetySpecifications  pgtype.Array[string]
	ComfortSpecifications pgtype.Array[string]
	Ownership             pgtype.Text
	Title                 pgtype.Text
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) (string, error) {
	row := q.db.QueryRow(ctx, updateCar,
		arg.CarID,
		arg.BrandID,
		arg.Model,
		arg.Year,
		arg.Price,
		arg.Mileage,
		arg.Color,
		arg.Transmission,
		arg.FuelType,
		arg.EngineCapacity,
		arg.Description,
		arg.DealershipID,
		arg.DealerID,
		arg.Status,
		arg.HorsePower,
		arg.Torque,
		arg.SafetySpecifications,
		arg.ComfortSpecifications,
		arg.Ownership,
		arg.Title,
	)
	var car_id string
	err := row.Scan(&car_id)
	return car_id, err
}

const updateCarBrand = `-- name: UpdateCarBrand :one
UPDATE
    car_brands
SET
    name = $2,
    logo_url = $3,
    country = $4,
    updated_at = now()
WHERE
        brand_id = $1 RETURNING brand_id, name, country, logo_url, created_at, updated_at
`

type UpdateCarBrandParams struct {
	BrandID string
	Name    pgtype.Text
	LogoUrl pgtype.Text
	Country pgtype.Text
}

func (q *Queries) UpdateCarBrand(ctx context.Context, arg UpdateCarBrandParams) (CarBrand, error) {
	row := q.db.QueryRow(ctx, updateCarBrand,
		arg.BrandID,
		arg.Name,
		arg.LogoUrl,
		arg.Country,
	)
	var i CarBrand
	err := row.Scan(
		&i.BrandID,
		&i.Name,
		&i.Country,
		&i.LogoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCarImage = `-- name: UpdateCarImage :one
UPDATE
    car_images
SET
    image_url = $2,
    updated_at = now()
WHERE
        car_image_id = $1 RETURNING car_image_id
`

type UpdateCarImageParams struct {
	CarImageID string
	ImageUrl   pgtype.Text
}

func (q *Queries) UpdateCarImage(ctx context.Context, arg UpdateCarImageParams) (string, error) {
	row := q.db.QueryRow(ctx, updateCarImage, arg.CarImageID, arg.ImageUrl)
	var car_image_id string
	err := row.Scan(&car_image_id)
	return car_image_id, err
}

const updateDealership = `-- name: UpdateDealership :one
UPDATE
    dealership
SET
    name = $2,
    display_name = $3,
    address = $4,
    city = $5,
    state = $6,
    zip = $7,
    phone = $8,
    email = $9,
    website = $10,
    facebook_url = $11,
    twitter_url = $12,
    instagram_url = $13,
    linkedin_url = $14,
    logo_url = $15,
    cover_url = $16,
    description = $17,
    updated_at = now()
WHERE
        dealership_id = $1 RETURNING dealership_id, owner_id, name, display_name, address, city, state, zip, phone, email, website, facebook_url, twitter_url, instagram_url, linkedin_url, logo_url, cover_url, description, created_at, updated_at
`

type UpdateDealershipParams struct {
	DealershipID string
	Name         string
	DisplayName  string
	Address      string
	City         string
	State        string
	Zip          string
	Phone        string
	Email        string
	Website      string
	FacebookUrl  string
	TwitterUrl   string
	InstagramUrl string
	LinkedinUrl  string
	LogoUrl      string
	CoverUrl     string
	Description  string
}

func (q *Queries) UpdateDealership(ctx context.Context, arg UpdateDealershipParams) (Dealership, error) {
	row := q.db.QueryRow(ctx, updateDealership,
		arg.DealershipID,
		arg.Name,
		arg.DisplayName,
		arg.Address,
		arg.City,
		arg.State,
		arg.Zip,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.FacebookUrl,
		arg.TwitterUrl,
		arg.InstagramUrl,
		arg.LinkedinUrl,
		arg.LogoUrl,
		arg.CoverUrl,
		arg.Description,
	)
	var i Dealership
	err := row.Scan(
		&i.DealershipID,
		&i.OwnerID,
		&i.Name,
		&i.DisplayName,
		&i.Address,
		&i.City,
		&i.State,
		&i.Zip,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.LogoUrl,
		&i.CoverUrl,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExtraFeature = `-- name: UpdateExtraFeature :one
UPDATE
    car_extra_features
SET
    name = $2,
    value = $3,
    updated_at = now()
WHERE
        car_extra_feature_id = $1 RETURNING car_extra_feature_id
`

type UpdateExtraFeatureParams struct {
	CarExtraFeatureID string
	Name              pgtype.Text
	Value             pgtype.Text
}

func (q *Queries) UpdateExtraFeature(ctx context.Context, arg UpdateExtraFeatureParams) (string, error) {
	row := q.db.QueryRow(ctx, updateExtraFeature, arg.CarExtraFeatureID, arg.Name, arg.Value)
	var car_extra_feature_id string
	err := row.Scan(&car_extra_feature_id)
	return car_extra_feature_id, err
}

const updateSparePart = `-- name: UpdateSparePart :one
UPDATE
    spare_parts
SET
    name = $2,description = $3,price = $4,used = $5,
    car_model = $6,car_brand = $7,other_compatible_cars = $8,
    car_year = $9,is_universal = $10,category = $11,part_number = $12,
    updated_at = now()
WHERE
        spare_part_id = $1 RETURNING spare_part_id
`

type UpdateSparePartParams struct {
	SparePartID         string
	Name                pgtype.Text
	Description         pgtype.Text
	Price               pgtype.Numeric
	Used                pgtype.Bool
	CarModel            pgtype.Text
	CarBrand            pgtype.Text
	OtherCompatibleCars pgtype.Array[string]
	CarYear             pgtype.Int4
	IsUniversal         pgtype.Bool
	Category            pgtype.Text
	PartNumber          pgtype.Text
}

func (q *Queries) UpdateSparePart(ctx context.Context, arg UpdateSparePartParams) (string, error) {
	row := q.db.QueryRow(ctx, updateSparePart,
		arg.SparePartID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Used,
		arg.CarModel,
		arg.CarBrand,
		arg.OtherCompatibleCars,
		arg.CarYear,
		arg.IsUniversal,
		arg.Category,
		arg.PartNumber,
	)
	var spare_part_id string
	err := row.Scan(&spare_part_id)
	return spare_part_id, err
}

const updateSparePartImage = `-- name: UpdateSparePartImage :one
UPDATE
    spare_part_images
SET
    spare_part_id = $2,image_url = $3,updated_at = now()
WHERE
        spare_part_image_id = $1 RETURNING spare_part_image_id
`

type UpdateSparePartImageParams struct {
	SparePartImageID string
	SparePartID      string
	ImageUrl         pgtype.Text
}

func (q *Queries) UpdateSparePartImage(ctx context.Context, arg UpdateSparePartImageParams) (string, error) {
	row := q.db.QueryRow(ctx, updateSparePartImage, arg.SparePartImageID, arg.SparePartID, arg.ImageUrl)
	var spare_part_image_id string
	err := row.Scan(&spare_part_image_id)
	return spare_part_image_id, err
}

const updateUserDealership = `-- name: UpdateUserDealership :one
UPDATE
    user_meta
SET
    dealership_id = $2,
    updated_at = now()
WHERE
        user_id = $1 RETURNING user_meta_id, user_id, facebook_url, twitter_url, instagram_url, linkedin_url, website_url, dealership_id
`

type UpdateUserDealershipParams struct {
	UserID       string
	DealershipID pgtype.Text
}

func (q *Queries) UpdateUserDealership(ctx context.Context, arg UpdateUserDealershipParams) (UserMetum, error) {
	row := q.db.QueryRow(ctx, updateUserDealership, arg.UserID, arg.DealershipID)
	var i UserMetum
	err := row.Scan(
		&i.UserMetaID,
		&i.UserID,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.WebsiteUrl,
		&i.DealershipID,
	)
	return i, err
}

const updateUserMeta = `-- name: UpdateUserMeta :one
UPDATE
    user_meta
SET
    facebook_url = $2,
    twitter_url = $3,
    instagram_url = $4,
    linkedin_url = $5,
    website_url = $6,
    user_meta_id = $7,
    updated_at = now()
WHERE
        user_id = $1
RETURNING user_meta_id, user_id, facebook_url, twitter_url, instagram_url, linkedin_url, website_url, dealership_id
`

type UpdateUserMetaParams struct {
	UserID       string
	FacebookUrl  pgtype.Text
	TwitterUrl   pgtype.Text
	InstagramUrl pgtype.Text
	LinkedinUrl  pgtype.Text
	WebsiteUrl   pgtype.Text
	UserMetaID   string
}

func (q *Queries) UpdateUserMeta(ctx context.Context, arg UpdateUserMetaParams) (UserMetum, error) {
	row := q.db.QueryRow(ctx, updateUserMeta,
		arg.UserID,
		arg.FacebookUrl,
		arg.TwitterUrl,
		arg.InstagramUrl,
		arg.LinkedinUrl,
		arg.WebsiteUrl,
		arg.UserMetaID,
	)
	var i UserMetum
	err := row.Scan(
		&i.UserMetaID,
		&i.UserID,
		&i.FacebookUrl,
		&i.TwitterUrl,
		&i.InstagramUrl,
		&i.LinkedinUrl,
		&i.WebsiteUrl,
		&i.DealershipID,
	)
	return i, err
}
