// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatabaseService_GetUserDealership_FullMethodName = "/DatabaseService/GetUserDealership"
	DatabaseService_GetUserMeta_FullMethodName       = "/DatabaseService/GetUserMeta"
	DatabaseService_InsertDealership_FullMethodName  = "/DatabaseService/InsertDealership"
	DatabaseService_InsertUserMeta_FullMethodName    = "/DatabaseService/InsertUserMeta"
	DatabaseService_UpdateUserMeta_FullMethodName    = "/DatabaseService/UpdateUserMeta"
)

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	GetUserDealership(ctx context.Context, in *GetUserDealershipRequest, opts ...grpc.CallOption) (*GetUserDealershipResponse, error)
	GetUserMeta(ctx context.Context, in *GetUserMetaRequest, opts ...grpc.CallOption) (*GetUserMetaResponse, error)
	InsertDealership(ctx context.Context, in *InsertDealershipRequest, opts ...grpc.CallOption) (*InsertDealershipResponse, error)
	InsertUserMeta(ctx context.Context, in *InsertUserMetaRequest, opts ...grpc.CallOption) (*InsertUserMetaResponse, error)
	UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...grpc.CallOption) (*UpdateUserMetaResponse, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) GetUserDealership(ctx context.Context, in *GetUserDealershipRequest, opts ...grpc.CallOption) (*GetUserDealershipResponse, error) {
	out := new(GetUserDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetUserDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetUserMeta(ctx context.Context, in *GetUserMetaRequest, opts ...grpc.CallOption) (*GetUserMetaResponse, error) {
	out := new(GetUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_GetUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertDealership(ctx context.Context, in *InsertDealershipRequest, opts ...grpc.CallOption) (*InsertDealershipResponse, error) {
	out := new(InsertDealershipResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertDealership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) InsertUserMeta(ctx context.Context, in *InsertUserMetaRequest, opts ...grpc.CallOption) (*InsertUserMetaResponse, error) {
	out := new(InsertUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_InsertUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) UpdateUserMeta(ctx context.Context, in *UpdateUserMetaRequest, opts ...grpc.CallOption) (*UpdateUserMetaResponse, error) {
	out := new(UpdateUserMetaResponse)
	err := c.cc.Invoke(ctx, DatabaseService_UpdateUserMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
// All implementations must embed UnimplementedDatabaseServiceServer
// for forward compatibility
type DatabaseServiceServer interface {
	GetUserDealership(context.Context, *GetUserDealershipRequest) (*GetUserDealershipResponse, error)
	GetUserMeta(context.Context, *GetUserMetaRequest) (*GetUserMetaResponse, error)
	InsertDealership(context.Context, *InsertDealershipRequest) (*InsertDealershipResponse, error)
	InsertUserMeta(context.Context, *InsertUserMetaRequest) (*InsertUserMetaResponse, error)
	UpdateUserMeta(context.Context, *UpdateUserMetaRequest) (*UpdateUserMetaResponse, error)
	mustEmbedUnimplementedDatabaseServiceServer()
}

// UnimplementedDatabaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (UnimplementedDatabaseServiceServer) GetUserDealership(context.Context, *GetUserDealershipRequest) (*GetUserDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) GetUserMeta(context.Context, *GetUserMetaRequest) (*GetUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertDealership(context.Context, *InsertDealershipRequest) (*InsertDealershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDealership not implemented")
}
func (UnimplementedDatabaseServiceServer) InsertUserMeta(context.Context, *InsertUserMetaRequest) (*InsertUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) UpdateUserMeta(context.Context, *UpdateUserMetaRequest) (*UpdateUserMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMeta not implemented")
}
func (UnimplementedDatabaseServiceServer) mustEmbedUnimplementedDatabaseServiceServer() {}

// UnsafeDatabaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseServiceServer will
// result in compilation errors.
type UnsafeDatabaseServiceServer interface {
	mustEmbedUnimplementedDatabaseServiceServer()
}

func RegisterDatabaseServiceServer(s grpc.ServiceRegistrar, srv DatabaseServiceServer) {
	s.RegisterService(&DatabaseService_ServiceDesc, srv)
}

func _DatabaseService_GetUserDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetUserDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetUserDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetUserDealership(ctx, req.(*GetUserDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_GetUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetUserMeta(ctx, req.(*GetUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertDealership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertDealershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertDealership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertDealership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertDealership(ctx, req.(*InsertDealershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_InsertUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).InsertUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_InsertUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).InsertUserMeta(ctx, req.(*InsertUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_UpdateUserMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).UpdateUserMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseService_UpdateUserMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).UpdateUserMeta(ctx, req.(*UpdateUserMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseService_ServiceDesc is the grpc.ServiceDesc for DatabaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDealership",
			Handler:    _DatabaseService_GetUserDealership_Handler,
		},
		{
			MethodName: "GetUserMeta",
			Handler:    _DatabaseService_GetUserMeta_Handler,
		},
		{
			MethodName: "InsertDealership",
			Handler:    _DatabaseService_InsertDealership_Handler,
		},
		{
			MethodName: "InsertUserMeta",
			Handler:    _DatabaseService_InsertUserMeta_Handler,
		},
		{
			MethodName: "UpdateUserMeta",
			Handler:    _DatabaseService_UpdateUserMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
